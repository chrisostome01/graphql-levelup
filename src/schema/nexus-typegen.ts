/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./../context"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Card: { // root type
    description: string; // String!
    id: number; // Int!
    title: string; // String!
  }
  Mutation: {};
  Query: {};
  Topic: { // root type
    id: number; // Int!
    topicName: string; // String!
  }
  User: { // root type
    Password: string; // String!
    email: string; // String!
    id: number; // Int!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Card: { // field return type
    description: string; // String!
    id: number; // Int!
    title: string; // String!
    topic: NexusGenRootTypes['Topic'] | null; // Topic
  }
  Mutation: { // field return type
    deleteCard: NexusGenRootTypes['Card']; // Card!
    newTopic: NexusGenRootTypes['Topic']; // Topic!
    newUser: NexusGenRootTypes['User'][]; // [User!]!
    post: NexusGenRootTypes['Card']; // Card!
    updateCard: NexusGenRootTypes['Card']; // Card!
    updateTopic: NexusGenRootTypes['Topic']; // Topic!
  }
  Query: { // field return type
    card: NexusGenRootTypes['Card'][]; // [Card!]!
    topic: NexusGenRootTypes['Topic'][]; // [Topic!]!
    user: NexusGenRootTypes['User'][]; // [User!]!
  }
  Topic: { // field return type
    cards: NexusGenRootTypes['Card'][]; // [Card!]!
    id: number; // Int!
    topicName: string; // String!
  }
  User: { // field return type
    Password: string; // String!
    email: string; // String!
    id: number; // Int!
  }
}

export interface NexusGenFieldTypeNames {
  Card: { // field return type name
    description: 'String'
    id: 'Int'
    title: 'String'
    topic: 'Topic'
  }
  Mutation: { // field return type name
    deleteCard: 'Card'
    newTopic: 'Topic'
    newUser: 'User'
    post: 'Card'
    updateCard: 'Card'
    updateTopic: 'Topic'
  }
  Query: { // field return type name
    card: 'Card'
    topic: 'Topic'
    user: 'User'
  }
  Topic: { // field return type name
    cards: 'Card'
    id: 'Int'
    topicName: 'String'
  }
  User: { // field return type name
    Password: 'String'
    email: 'String'
    id: 'Int'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    deleteCard: { // args
      id: number; // Int!
    }
    newTopic: { // args
      topicName: string; // String!
    }
    newUser: { // args
      email: string; // String!
      password: string; // String!
    }
    post: { // args
      description: string; // String!
      title: string; // String!
      topicId: number; // Int!
    }
    updateCard: { // args
      description: string; // String!
      id: number; // Int!
      title: string; // String!
      topicId: number; // Int!
    }
    updateTopic: { // args
      id: number; // Int!
      topicName: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}